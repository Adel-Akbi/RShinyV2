),
),
column(3,
selectInput(
inputId = 'in1',
label = '',
choices = c(Choose='', state.name),
selectize=FALSE)
),
#rederText to display test details ...
column(9,
plotlyOutput(
outputId = "plot1"
)
)
)
)
library(shiny)
library(plotly)
ui <- fluidPage(                                        #toute la page 'respenssive'
#
#
# titlePanel(
#
#   fluidRow(
#
#     column(9,"TunnelGoalFitts Visualizer (Cohort 2020)"),                           #Title
#
#     column(3,                                                                    #DropDown
#
#
#            verbatimTextOutput('outtt'),
#            selectInput('in1',
#                        '',
#                        c(Choose='', state.name), selectize=FALSE)
#     )
#   )
# ),
#
#
#
# tabsetPanel(type = "tab",
#
#             tabPanel(strong("Test Details"),
#
#                      br(),
#                      br(),
#                      br(),
#                      br(),
#
#                      column(3, h4("Choose Test")
#                      ),
#
#                      fluidRow(
#
#                        column(9,
#                               verbatimTextOutput('out'),
#                               selectInput('in1', '', c(Choose='', state.name), selectize=FALSE)
#                        )
#                      )
#             ),
#
#             tabPanel(strong("Compare Tests"), verbatimTextOutput("summary"))
# ),
#
# mainPanel(
#   plotlyOutput("plot1")
#
# )
fluidRow(                            #deviser en ligne et colonnes (boostrap)
column(9,
titlePanel('TunnelGoalFitts Visualizer (Cohort 2020)')
),
column(3,
selectInput(
inputId = 'in1',
label = '',
choices = c(Choose='', state.name),
selectize=FALSE),
tags$div(
style = "margin-bottom: 80px",
uiOutput("dropdown_targets")
),
),
column(12,
tabsetPanel(
type = "tab",
tabPanel(
strong("Test Details")
),
tabPanel(
strong("Compare Tests"),
verbatimTextOutput("summary")                           #check afterrrrrrrrrrrrr
)
),
tags$div(
style = "margin-bottom: 80px",
uiOutput("dropdown_targets")
),
),
column(3,
selectInput(
inputId = 'in1',
label = '',
choices = c(Choose='', state.name),
selectize=FALSE)
),
#rederText to display test details ...
column(9,
plotlyOutput(
outputId = "plot1"
)
)
)
)
runApp()
runApp()
runApp()
library(shiny)
library(plotly)
ui <- fluidPage(                                                                                  #The entire page will be respensive
fluidRow(                                                                                       #Devise the page by row and column (boostrap)
column(9,
titlePanel('TunnelGoalFitts Visualizer (Cohort 2020)')
),
column(3,
selectInput(
inputId = 'in1',
label = '',
choices = c(Choose='', state.name),
selectize=FALSE),
tags$div(
style = "margin-bottom: 80px",
uiOutput("dropdown_targets")
)
),
column(12,
tabsetPanel(
type = "tab",
tabPanel(
strong("Test Details")
),
tabPanel(
strong("Compare Tests"),
verbatimTextOutput("summary")                           #check afterrrrrrrrrrrrr
)
)
),
column(3,
selectInput(
inputId = 'in1',
label = '',
choices = c(Choose='', state.name),
selectize=FALSE),
tags$div(
style = "margin-top: 100px",
uiOutput("dropdown_targets")
)
),
#rederText to display test details ...
column(9,
plotlyOutput(
outputId = "plot1"
),
tags$div(
style = "margin-top: 100px",
uiOutput("dropdown_targets")
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(plotly)
ui <- fluidPage(                                                                                  #The entire page will be respensive
fluidRow(                                                                                       #Devise the page by row and column (boostrap)
column(9,
titlePanel('TunnelGoalFitts Visualizer (Cohort 2020)')
),
column(3,
selectInput(
inputId = 'in1',
label = '',
choices = c(Choose='', state.name),
selectize=FALSE),
tags$div(
style = "margin-bottom: 80px",
)
),
column(12,
tabsetPanel(
type = "tab",
tabPanel(
inputId = "testd",
title = "Test Details",
column(3,
selectInput(
inputId = 'in1',
label = 'Choose Test',
choices = c(Choose='', state.name),
selectize=FALSE),
),
column(9,
plotlyOutput(
outputId = "plot1"
),
tags$div(
style = "margin-bottom: 50px"
)
),
column(7,
),
column(5,
selectInput(
inputId = 'in1',
label = '',
choices = c(Choose='', state.name),
selectize=FALSE),)
)
),
tabPanel(
inputId = "compt",
title= "Compare Test"
# verbatimTextOutput("summary")                           #check afterrrrrrrrrrrrr
)
),
tags$div(
style = "margin-bottom: 100px"
)
),
#   column(3,
#          selectInput(
#            inputId = 'in1',
#            label = 'Choose Test',
#            choices = c(Choose='', state.name),
#            selectize=FALSE),
#
#
#   ),
#
#
#
#   column(9,
#          plotlyOutput(
#            outputId = "plot1"
#          ),
#
#
#          tags$div(
#            style = "margin-bottom: 50px"
#          )
#   ),
#
#   column(7,
#
#   ),
#
#
#   column(5,
#          selectInput(
#            inputId = 'in1',
#            label = '',
#            choices = c(Choose='', state.name),
#            selectize=FALSE),)
# )
)
runApp()
# library(shiny)
# library(plotly)
#
#
# ui <- fluidPage(                                                                                  #The entire page will be respensive
#
#
#
#   fluidRow(                                                                                       #Devise the page by row and column (boostrap)
#
#     column(9,
#            titlePanel('TunnelGoalFitts Visualizer (Cohort 2020)')
#     ),
#
#     column(3,
#            selectInput(
#              inputId = 'in1',
#              label = '',
#              choices = c(Choose='', state.name),
#              selectize=FALSE),
#
#            tags$div(
#              style = "margin-bottom: 80px",
#
#            )
#     ),
#
#
#
#     column(12,
#            tabsetPanel(
#              type = "tab",
#              tabPanel(
#                inputId = "testd",
#                title = "Test Details"
#
#              ),
#
#              tabPanel(
#                inputId = "compt",
#                title= "Compare Test"
#
#
#
#
#                # verbatimTextOutput("summary")                           #check afterrrrrrrrrrrrr
#              )
#            ),
#
#            tags$div(
#              style = "margin-bottom: 100px"
#            )
#
#
#     ),
#
#
#     column(3,
#            selectInput(
#              inputId = 'in1',
#              label = 'Choose Test',
#              choices = c(Choose='', state.name),
#              selectize=FALSE),
#
#
#     ),
#
#
#
#     column(9,
#            plotlyOutput(
#              outputId = "plot1"
#            ),
#
#
#            tags$div(
#              style = "margin-bottom: 50px"
#            )
#     ),
#
#     column(7,
#
#     ),
#
#
#     column(5,
#            selectInput(
#              inputId = 'in1',
#              label = '',
#              choices = c(Choose='', state.name),
#              selectize=FALSE),)
#   )
#
# )
#
#
# library(shiny)
# library(plotly)
#
# # Define UI for application that plots features of movies
# shinyUI(navbarPage(title = "Whack A Mole VR",
#                    tabPanel(
#                      "Tests results",
#
#                      # Sidebar layout with a input and output definitions
#                      sidebarLayout(
#                        # Inputs
#                        sidebarPanel(
#                          uiOutput("Date"),
#                          uiOutput("Participants"),
#                          uiOutput("Difficulty"),
#                          uiOutput("TestId")
#                        ),
#
#                        # Outputs
#                        mainPanel(tabsetPanel(
#                          tabPanel("Hit location",
#                                   selectInput(
#                                     "HeatMapDisplay",
#                                     label = "",
#                                     choices = list("Hits - Misses" = "-1", "Hits" = "1", "Misses" = "2"),
#                                     selected = -1
#                                   ),
#                                   plotlyOutput("PrecisionHeatMap")
#                          ),
#                          tabPanel("Precision",
#                                   plotlyOutput("plot")
#                          )
#                        ),
#                        hr(),
#                        fluidRow(
#                          column(6,
#                                 textOutput("ParticipantTextOutput"),
#                                 textOutput("TestTextOutput"),
#                                 textOutput("DurationTextOutput"),
#                                 textOutput("SpeedTextOutput")
#                          ),
#                          column(6,
#                                 textOutput("MirrorEffectTextOutput"),
#                                 textOutput("DualLaserTextOutput"),
#                                 textOutput("EyePatchTextOutput"),
#                                 textOutput("PrismEffectTextOutput")
#                          )
#                        )
#                        )
#                      )
#                    )))
library(shiny)
library(plotly)
ui <- fluidPage(
titlePanel(
fluidRow(
column(9,"TunnelGoalFitts Visualizer (Cohort 2020)"),                           #Title
column(3,                                                                    #DropDown
verbatimTextOutput('outtt'),
selectInput('in1',
'',
c(Choose='', state.name), selectize=FALSE)
)
)
),
tabsetPanel(type = "tab",
tabPanel(strong("Test Details"),
br(),
br(),
br(),
br(),
column(4, h4("Choose Test")
),
fluidRow(
column(9,
verbatimTextOutput('out'),
selectInput('in1', 'Options', c(Choose='', state.name), selectize=FALSE)
)
)
),
tabPanel(strong("Compare Tests"), verbatimTextOutput("summary"))
),
mainPanel(
plotlyOutput("plot1")
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('D:/ProjectAalborg/Project/RShinyApp')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
